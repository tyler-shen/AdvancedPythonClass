python_course_01 Slide 6
--------------------------------------------------------
https://leetcode.com/problems/find-subarrays-with-equal-sum/description/

=========================================================

python_course_02 End
--------------------------------------------------------
https://leetcode.com/problems/richest-customer-wealth/description/
https://leetcode.com/problems/shuffle-the-array/description/
https://leetcode.com/problems/how-many-numbers-are-smaller-than-the-current-number/description/
https://leetcode.com/problems/delete-columns-to-make-sorted/descriptio

=========================================================

python_course_04 Slide 3
--------------------------------------------------------
https://leetcode.com/problems/baseball-game/description/

=========================================================

python_course_04 Slide 5
--------------------------------------------------------
https://leetcode.com/problems/number-of-students-unable-to-eat-lunch/description/

=========================================================

python_course_04 Slide 8
--------------------------------------------------------
https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-1.php
https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-3.php
--------------------------------------------------------
https://leetcode.com/problems/power-of-two/description/
--------------------------------------------------------
    def isPowerOfTwo(self, n: int) -> bool:
        if n == 0:
            return False
        
        if n % 2 == 0:
            return self.isPowerOfTwo(n // 2)
        else:
            if n == 1:
                return True
            else:
                return False
--------------------------------------------------------
https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-6.php

=========================================================

Use the code below to finish the fullname function and make it a property. Also create a setter function for it. When user call the setter function with a full name, it will set the first name and last name to the object.

class Person:
    def __init__(self, firstname, lastname):
        self.firstname = firstname
        self.lastname = lastname

    def fullname(self):
        pass

Sample output:

p = Person("Tyler", "Shen")

# this is the getter function
print(p.fullname)   # Tyler Shen
print(p.firstname)   # Tyler

# now try the setter function. After you call it with a new full name, it will assign first name and last name separately to object's firstname and lastname

p.fullname = "Jimmy Lei"
print(p.fullname)  # Jimmy Lei
print(p.firstname)  # Jimmy
--------------------------------------------------------

class Person:
    def __init__(self, firstname, lastname):
        self.firstname = firstname
        self.lastname = lastname

    @property    
    def fullname(self):
        return self.first + ' '+ self.last

    @fullname.setter
    def fullname(self, name):
        firstname, lastname = name.split()
        self.firstname = firstname
        self.lastname = lastname

p = Person("Tyler", "Shen")
print(p.fullname)
print(p.firstname)
p.fullname = "Jimmy Lei"
print(p.fullname)
print(p.firstname)

=========================================================

python_course_07 Slide 4
--------------------------------------------------------

Wring one line of code to filter the people with height > 170 and weight > 60
The result is still a dictionary with people's height and weight

people = {
    'Tyler Shen': (175, 67),
    'Amy Huang': (164, 45),
    'Frank Bao': (177, 70),
    'June Wang': (158, 42)
}

Sample output:
{'Tyler Shen': (175, 67), 'Frank Bao': (177, 70)}
---------------------------------------------------------
print(dict(filter(lambda x: (x[1][0], x[1][1]) > (170, 60), people.items())))

=========================================================

python_course_08 Slide 7
--------------------------------------------------------

append ; for all lines in the file
--------------------------------------------------------
lines = []
with open("test.txt", "r") as f:
    for line in f:
        lines.append(line)
print(lines)

file = open("test2.txt", "w")
for line in lines:
    if "\n" in line:
        # line1, line2
        newLine = line[0:len(line)-1] + ";\n"
    else:
        # line3
        newLine = line + ";"
    file.write(newLine)
file.close()

=========================================================

replace USA with Canada in the file
--------------------------------------------------------
lines = []
with open("test.txt", "r") as f:
    for line in f:
        lines.append(line)
print(lines)

file = open("test.txt", "w")
for line in lines:
    newLine = line.replace("USA", "Canada")
    file.write(newLine)
file.close()


