python_course_01 Slide 2
--------------------------------------------------------
https://leetcode.com/problems/can-place-flowers/description/
--------------------------------------------------------
    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:
        prev_placed = False
        for pos in flowerbed:
            if pos == 0 and prev_placed == False:
                prev_placed = True
                n -= 1
            elif pos == 0 and prev_placed == True:
                prev_placed = False
            elif pos == 1 and prev_placed == False:
                prev_placed = True
            elif pos == 1 and prev_placed == True:
                n += 1
        return n <= 0
=========================================================

python_course_01 Slide 6
--------------------------------------------------------
https://leetcode.com/problems/find-subarrays-with-equal-sum/description/
--------------------------------------------------------
    def findSubarrays(self, nums: List[int]) -> bool:
        if len(nums) < 3:
            return False

        ht = set()

        for i in range(1, len(nums)):
            number = nums[i-1] + nums[i]
            if number in ht:
                return True
            else:
                ht.add(number)

        return False

=========================================================

python_course_02 Slide 9
--------------------------------------------------------
https://leetcode.com/problems/shuffle-string/description/

=========================================================

python_course_02 End
--------------------------------------------------------
https://leetcode.com/problems/richest-customer-wealth/description/
https://leetcode.com/problems/shuffle-the-array/description/
https://leetcode.com/problems/how-many-numbers-are-smaller-than-the-current-number/description/
https://leetcode.com/problems/delete-columns-to-make-sorted/descriptio

=========================================================

python_course_04 Slide 3
--------------------------------------------------------
https://leetcode.com/problems/baseball-game/description/

=========================================================

python_course_04 Slide 5
--------------------------------------------------------
https://leetcode.com/problems/number-of-students-unable-to-eat-lunch/description/

=========================================================

python_course_04 Slide 8
--------------------------------------------------------
https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-1.php
https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-3.php
--------------------------------------------------------
https://leetcode.com/problems/power-of-two/description/
--------------------------------------------------------
    def isPowerOfTwo(self, n: int) -> bool:
        if n == 0:
            return False
        
        if n % 2 == 0:
            return self.isPowerOfTwo(n // 2)
        else:
            if n == 1:
                return True
            else:
                return False
--------------------------------------------------------
https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-6.php

=========================================================

python_course_04 Slide 9
--------------------------------------------------------
https://leetcode.com/problems/maximum-distance-between-a-pair-of-values/description/
Solution in GitHub https://github.com/tyler-shen/AdvancedPythonClass/blob/main/Maximum_Distance_Between_a_Pair_of_Values.py

=========================================================

Use the code below to finish the fullname function and make it a property. Also create a setter function for it. When user call the setter function with a full name, it will set the first name and last name to the object.

class Person:
    def __init__(self, firstname, lastname):
        self.firstname = firstname
        self.lastname = lastname

    def fullname(self):
        pass

Sample output:

p = Person("Tyler", "Shen")

# this is the getter function
print(p.fullname)   # Tyler Shen
print(p.firstname)   # Tyler

# now try the setter function. After you call it with a new full name, it will assign first name and last name separately to object's firstname and lastname

p.fullname = "Jimmy Lei"
print(p.fullname)  # Jimmy Lei
print(p.firstname)  # Jimmy
--------------------------------------------------------

class Person:
    def __init__(self, firstname, lastname):
        self.firstname = firstname
        self.lastname = lastname

    @property    
    def fullname(self):
        return self.first + ' '+ self.last

    @fullname.setter
    def fullname(self, name):
        firstname, lastname = name.split()
        self.firstname = firstname
        self.lastname = lastname

p = Person("Tyler", "Shen")
print(p.fullname)
print(p.firstname)
p.fullname = "Jimmy Lei"
print(p.fullname)
print(p.firstname)

=========================================================

python_course_07 Slide 4
--------------------------------------------------------

Wring one line of code to filter the people with height > 170 and weight > 60
The result is still a dictionary with people's height and weight

people = {
    'Tyler Shen': (175, 67),
    'Amy Huang': (164, 45),
    'Frank Bao': (177, 70),
    'June Wang': (158, 42)
}

Sample output:
{'Tyler Shen': (175, 67), 'Frank Bao': (177, 70)}
---------------------------------------------------------
print(dict(filter(lambda x: (x[1][0], x[1][1]) > (170, 60), people.items())))

=========================================================


After all done
Explain decimal and binary numbers convert
Random practice
Score of a String:
https://leetcode.com/problems/score-of-a-string/description/?envType=problem-list-v2&envId=m2vzg4x1
Build Array from Permutation:
https://leetcode.com/problems/build-array-from-permutation/description/?envType=problem-list-v2&envId=m2vzg4x1
Number of Good Pairs:
https://leetcode.com/problems/number-of-good-pairs/description/?envType=problem-list-v2&envId=m2vzg4x1
Divisible and Non-divisible Sums Difference:
https://leetcode.com/problems/divisible-and-non-divisible-sums-difference/description/?envType=problem-list-v2&envId=m2vzg4x1
Design Parking System:
https://leetcode.com/problems/design-parking-system/description/?envType=problem-list-v2&envId=m2vzg4x1
Partitioning Into Minimum Number Of Deci-Binary Numbers:
https://leetcode.com/problems/partitioning-into-minimum-number-of-deci-binary-numbers/description/?envType=problem-list-v2&envId=m2vzg4x1
